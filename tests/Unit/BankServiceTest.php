<?php

namespace Tests\Unit;

use App\Interfaces\IBankRepository;
use App\Models\Bank;
use App\Repository\BankRepository;
use Illuminate\Database\Eloquent\Collection;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery;

class BankServiceTest extends TestCase
{
    protected $bank_repository;

    protected $mock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_that_allBanks_calls_getBanks_of_BankRepository_Successfully()
    {

        $mock = Mockery::mock(IBankRepository::class);

      $banks =  $mock->shouldReceive('getBanks')
            ->andReturn(Collection::class)
            ->mock();
    }
//
//
//    public function test_that_getABankByBankID_calls_getABankByBankID_of_BankRepository_Successfully()
//    {
//
//    }


//$mock = Mockery::mock('IBankService')->shouldReceive('allBanks')->once()->andReturn(new Collection());
//$this->app->instance('VenueRepositoryInterface',$mock);
//$response = $this->call('GET','venue');
//$this->assertEquals(200, $response->status());
}
